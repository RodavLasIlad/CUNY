nrow(filter(data, data$loan_amnt == 35000))
nrow(filter(data, data$loan_amnt == 1000))
head(data$loan_status)
loan_status
ggplot(data, aes(loan_status)) +
geom_bar() +
xlab("Loan Status") +
ggtitle("Loan Status")
loan_status
ggplot(data, aes(loan_status)) +
geom_bar() +
xlab("Loan Status") +
ggtitle("Loan Status") +
scale_y_log10()
ggplot(data, aes(loan_status)) +
geom_bar() +
xlab("Loan Status") +
ggtitle("Loan Status") +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x)))
data$home_ownership[data$home_ownership == ""] <- NA
data$grade[data$grade == ""] <- NA
ggplot(data, aes(x=factor(0), y=loan_amnt)) +
geom_boxplot() +
xlab("") +
ylab("Loan Amount") +
ggtitle("Box plot of loan amount") +
theme(axis.ticks=element_blank(), axis.text.x=element_blank())
ggplot(data, aes(x=factor(emp_length), y=annual_inc)) + geom_point()
ggplot(data, aes(x=factor(emp_length), y=annual_inc)) + geom_point(position = "jitter")
ggplot(data, aes(x=factor(emp_length), y=annual_inc)) + geom_point(position = "jitter") + geom_smooth()
ggplot(data, aes(x=factor(emp_length), y=annual_inc)) + geom_point(position = "jitter") + abline()
ggplot(data, aes(x=factor(emp_length), y=loan_amnt)) + geom_point(position = "jitter")
ggplot(data, aes(x=addr_state, y=emp_length)) + geom_point()
ggplot(data, aes(x=annual_inc, y=emp_length)) + geom_point()
ggplot(data, aes(x=annual_inc, y=emp_length)) + geom_tile()
ggplot(data, aes(x=annual_inc, y=emp_length)) + geom_bar()
ggplot(data, aes(x=emp_length, y=annual_inc)) + geom_bar()
ggplot(data, aes(x=emp_length, y=annual_inc)) + geom_boxplot()
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot() +
scale_y_log10()
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot(outlier.shape = NA) +
scale_y_log10() +
xlab("Employment Length") +
ylab("Annual Income")
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot(outlier.shape = NA) +
scale_y_log10() +
geom_point() +
xlab("Employment Length") +
ylab("Annual Income")
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot(outlier.shape = NA) +
scale_y_log10() +
geom_point(position="jitter") +
xlab("Employment Length") +
ylab("Annual Income")
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot(outlier.shape = NA) +
scale_y_log10() +
xlab("Employment Length") +
ylab("Annual Income")
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot() +
scale_y_log10() +
xlab("Employment Length") +
ylab("Annual Income")
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot() +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y) +
xlab("Employment Length") +
ylab("Annual Income")
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot() +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y)) +
xlab("Employment Length") +
ylab("Annual Income")
library(dplyr)
library(ggplot2)
library(scales)
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot() +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x))) +
xlab("Employment Length") +
ylab("Annual Income")
table(data$addr_state)
ddply(data, .(addr_state), summarise, mean <- mean(annual_inc))
library(plyr)
ddply(data, .(addr_state), summarise, mean <- mean(annual_inc))
ddply(data, .(addr_state), summarise, meany <- mean(annual_inc))
ddply(data, .(addr_state), summarise, meany = mean(annual_inc))
ddply(data, .(addr_state), summarise, mean = mean(annual_inc))
state.mean.inc <- ddply(data, .(addr_state), summarise, mean = mean(annual_inc))
ggplot(state.mean.inc, aes(x = state.mean, y=addr_state)) + geom bar()
ggplot(state.mean.inc, aes(x = state.mean, y=addr_state)) + geom_bar()
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean = mean(annual_inc))
ggplot(state.mean.inc, aes(x = state.mean, y=addr_state)) + geom_bar()
ggplot(state.mean.inc, aes(x = state.mean, y=addr_state)) + geom_histogram()
ggplot(state.mean.inc, aes(y = state.mean, x=addr_state)) + geom_histogram()
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean = mean(annual_inc))
ggplot(state.mean.inc, aes(y = state.mean, x=addr_state)) + geom_histogram()
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean.inc = mean(annual_inc))
ggplot(state.mean.inc, aes(y = state.mean.inc, x=addr_state)) + geom_histogram()
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean.inc = mean(annual_inc))
ggplot(state.mean.inc, aes(y = state.mean.inc, x=addr_state)) + geom_histogram()
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean = mean(annual_inc))
ggplot(state.mean.inc, aes(y = state.mean, x=addr_state)) + geom_histogram()
state.mean.inc
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) + geom_histogram()
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) + geom_point()
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) + geom_bar()
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) + geom_bar(stat="identity")
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) + geom_bar(stat="identity") + coord_flip()
state.mean.inc <- factor(state.mean.inc$addr_state, levels=rev(levels(state.mean.inc$addr_state)))
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) +
geom_bar(stat="identity") + coord_flip()
state.mean.inc
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean = mean(annual_inc))
state.mean.inc$addr_state <- factor(state.mean.inc$addr_state, levels=rev(levels(state.mean.inc$addr_state)))
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) +
geom_bar(stat="identity") +
coord_flip()
# reordering emp_length (so 10+ doesn't fall after 1):
##### Reading in the data:
data <- read.csv("C:\\Users\\Brett\\Documents\\Data\\LoanStats3c.csv", header=T)
# choosing only a few of the 96 columns
data <- select(data, id, addr_state, annual_inc, emp_length, grade, home_ownership, loan_amnt, loan_status)
# reordering emp_length (so 10+ doesn't fall after 1):
data$emp_length <-factor((data$emp_length), c("< 1 year", "1 year", "2 years", "3 years", "4 years", "5 years", "6 years", "7 years", "8 years", "9 years", "10+ years", "n/a", ""))
### Libraries
library(dplyr)
library(ggplot2)
library(scales)
library(plyr)
data <- data[1:102505,]
data$emp_length[data$emp_length == ""] <- NA
data$emp_length[data$emp_length == "n/a"] <- NA
data$grade[data$grade == ""] <- NA
data$home_ownership[data$home_ownership == ""] <- NA
data$addr_state <- factor(data$addr_state, levels=rev(levels(data$addr_state)))
ggplot(data, aes(addr_state)) +
geom_histogram() +
coord_flip() +
xlab("Loans count") +
ylab("State") +
ggtitle("Total loans per state")
qplot(factor(0), annual_inc, data = data, geom="jitter") +
geom_hline(aes(yintercept=mean(data$annual_inc, na.rm=T)), col="Red") +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x))) +
annotation_logticks(sides="l") +
xlab("Red line is the mean") +
theme(axis.ticks=element_blank(), axis.text.x=element_blank()) +
ylab("Log scale annual income") +
ggtitle("Annual income")
mean(data$annual_inc)
summary(data$annual_inc)
ggplot(data, aes(factor(emp_length))) +
geom_bar() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
xlab("Employment length") +
ggtitle("Employment length")
ggplot(data,aes(factor(grade))) +
geom_bar() +
xlab("Grade") +
ggtitle("Loan quality grade")
ggplot(data, aes(factor(home_ownership))) +
geom_bar() +
xlab("Home Ownership Status") +
ggtitle("Home ownership")
ggplot(data, aes(x=factor(0), y=loan_amnt)) +
geom_boxplot() +
xlab("") +
ylab("Loan Amount") +
ggtitle("Box plot of loan amount") +
theme(axis.ticks=element_blank(), axis.text.x=element_blank())
mean(data$loan_amnt)
summary(data$loan_amnt)
nrow(filter(data, data$loan_amnt == 35000))
nrow(filter(data, data$loan_amnt == 1000))
ggplot(data, aes(loan_status)) +
geom_bar() +
xlab("Loan Status") +
ggtitle("Loan Status") +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x)))
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot() +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x))) +
xlab("Employment Length") +
ylab("Annual Income")
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean = mean(annual_inc))
state.mean.inc$addr_state <- factor(state.mean.inc$addr_state, levels=rev(levels(state.mean.inc$addr_state)))
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) +
geom_bar(stat="identity") +
coord_flip()
state.mean.inc$addr_state <- factor(state.mean.inc$addr_state, levels=rev(levels(state.mean.inc$addr_state)))
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) +
geom_bar(stat="identity") +
coord_flip()
state.mean.inc <- ddply(data, .(addr_state), summarise, state.mean = mean(annual_inc))
# state.mean.inc$addr_state <- factor(state.mean.inc$addr_state, levels=rev(levels(state.mean.inc$addr_state)))
ggplot(state.mean.inc, aes(x=addr_state, y=state.mean)) +
geom_bar(stat="identity") +
coord_flip() +
xlab("Mean income") +
ylab("State") +
ggtitle("Mean income by state")
ggplot(data, aes(x=factor(grade), y=emp_length)) + geom_bar()
ggplot(data, aes(x=factor(grade), y=emp_length)) + geom_bar(stat="identity")
ggplot(data, aes(x=loan_amnt, y=loan_status)) + geom_bar(stat="identity")
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) + geom_point()
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) + geom_bar()
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) + geom_bar(stat="identity")
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) +
geom_bar(stat="identity") +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x))) +
xlab("Loan Status") +
ylab("Loan amount scaled in log10")
ggplot(data, aes(x=emp_length, y=annual_inc)) +
geom_boxplot() +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x))) +
xlab("Employment Length") +
ylab("Annual Income")
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) +
geom_bar(stat="identity") +
scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x))) +
xlab("Loan Status") +
ylab("Loan amount scaled in log10")
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) +
geom_bar(stat="identity") +
#scale_y_log10(breaks = trans_breaks("log10", function(y) 10^y), labels = trans_format("log10", math_format(10^.x))) +
xlab("Loan Status") +
ylab("Loan amount scaled in log10")
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) +
geom_bar(stat="identity") +
scale_y_log10() +
xlab("Loan Status") +
ylab("Loan amount scaled in log10")
max(loan_amnt)
max(data$loan_amnt)
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) +
geom_bar(stat="identity")
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) +
geom_boxplot()
ggplot(data, aes(x=factor(loan_status), y=loan_amnt)) +
geom_boxplot() +
xlab("Loan Status") +
ylab("Loan amount")
ggplot(data, aes(x=factor(home_ownership), y=loan_amnt)) +
geom_boxplot()
ggplot(data, aes(x=factor(home_ownership), y=loan_amnt)) +
geom_boxplot() +
xlab("Home Ownership Status") +
ylab("Loan Amount") +
ggtitle("Loan amount and home ownership status")
ggplot(data, aes(x=annual_inc)) + stat_bin()
ggplot(data, aes(x=annual_inc)) +
stat_bin(binwidth=50000)
ggplot(data, aes(x=annual_inc)) +
stat_bin(binwidth=100000)
ggplot(data, aes(x=annual_inc)) +
stat_bin(breaks=seq(10000, 30000, by=50000)
)
stat_bin(breaks=seq(0, 300000, by=50000))
ggplot(data, aes(x=annual_inc)) +
stat_bin(breaks=seq(0, 300000, by=50000))
ggplot(data, aes(x=annual_inc)) +
stat_bin(breaks=seq(0, 300000, by=25000)) +
xlab("Annual income grouped by 50k") +
ylab("Count") +
ggtitle("Another look at income")
ggplot(data, aes(x=annual_inc)) +
stat_bin(breaks=seq(0, 300000, by=25000)) +
xlab("Annual income grouped by 25k") +
ylab("Count") +
ggtitle("Another look at income") +
scale_x_continuous(breaks=seq(0,3000000, 25000))
# week6quiz.R
# [For your convenience], here is the provided code from Jared Lander's R for Everyone,
# 6.7 Extract Data from Web Sites
install.packages("XML")
require(XML)
theURL <- "http://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/"
bowlPool <- readHTMLTable(theURL, which = 1, header = FALSE, stringsAsFactors = FALSE)
bowlPool
# 1. What type of data structure is bowlpool?
# 2. Suppose instead you call readHTMLTable() with just the URL argument,
# against the provided URL, as shown below
theURL <- "http://www.w3schools.com/html/html_tables.asp"
hvalues <- readHTMLTable(theURL)
# What is the type of variable returned in hvalues?
# 3. Write R code that shows how many HTML tables are represented in hvalues
# 4. Modify the readHTMLTable code so that just the table with Number,
# FirstName, LastName, # and Points is returned into a dataframe
# 5. Modify the returned data frame so only the Last Name and Points columns are shown.
# 6 Identify another interesting page on the web with HTML table values.
# This may be somewhat tricky, because while
# HTML tables are great for web-page scrapers, many HTML designers now prefer
# creating tables using other methods (such as <div> tags or .png files).
# 7 How many HTML tables does that page contain?
# 8 Identify your web browser, and describe (in one or two sentences)
# how you view HTML page source in your web browser.
type(bowlPool)
class(bowlPool)
class(hvalues)
hvalues
count(hvalues)
dim(hvalues)
length(hvalues)
hvalues[1]
hvalues[2]
hvalues[3]
class(hvalues)
hvalues
theURL <- "http://www.w3schools.com/html/html_tables.asp"
theURL <- "http://en.wikipedia.org/wiki/All-time_Olympic_Games_medal_table"
hvalues <- readHTMLTable(theURL)
# What is the type of variable returned in hvalues?
class(hvalues)
hvalues
hvalues[1]
length(hvalues)
length(hvalues)
theURL <- "http://www.w3schools.com/html/html_tables.asp"
hvalues <- readHTMLTable(theURL)
# What is the type of variable returned in hvalues?
class(hvalues)
# A list
##### 3. Write R code that shows how many HTML tables are represented in hvalues
length(hvalues)
theURL <- "http://www.w3schools.com/html/html_tables.asp"
hvalues <- readHTMLTable(theURL, which=1)
hvalues
class(hvalues)
library(dplyr)
hvalues <- select(hvalues, "Last Name", "Points")
hvalues
select(havalues, Number)
select(hvalues, Number)
hvalues <- select(hvalues, Last Name, Points)
hvalues <- select(hvalues, get('Last Name'), Points)
hvalues
theNewURL <- "http://www.mountaindragon.com/html/tables2.htm"
nvalues <- readHTMLTable(theNewURL)
length(nvalues)
install.packages("shiny")
library(rvest)
?readHTMLTable
??readHTMLTable
require(XML)
library(dplyr)
theURL <- "http://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/"
bowlPool <- readHTMLTable(theURL, which = 1, header = FALSE, stringsAsFactors = FALSE)
bowlPool
bowlPool <- readHTMLTable(theURL, which = 1, header = c("a", "b", "c"), stringsAsFactors = FALSE)
bowlPool
bowlPool <- readHTMLTable(theURL, which = 1, header = c("asdf", "fdas", "sdfa"), stringsAsFactors = FALSE)
bowlPool
names(bowlPool)
doc <- "http://www.nber.org/cycles/cyclesmain.html"
# The  main table is the second one because it's embedded in the page table.
table <- getNodeSet(htmlParse(doc),"//table") [[2]]
xt <- readHTMLTable(table,
header = c("peak","trough","contraction",
"expansion","trough2trough","peak2peak"),
colClasses = c("character","character","character",
"character","character","character"),
trim = TRUE, stringsAsFactors = FALSE
)
xt
bowlPool <- readHTMLTable(theURL, which = 1, header = "yes", stringsAsFactors = FALSE)
bowlPool
bowlPool <- readHTMLTable(theURL, which = 1, header = "helpme", stringsAsFactors = FALSE)
bowlPool
bowlPool <- readHTMLTable(theURL, header = "helpme", stringsAsFactors = FALSE)
bowlPool
bowlPool <- readHTMLTable(theURL, header = c("a", "b", "c"), stringsAsFactors = FALSE)
bowlPool
names(bowlPool)
cdc <- read.csv("cleaned-cdc-mortality-1999-2010.csv")
setwd("C:\\Users\\Brett\\Dropbox\\CUNY\\608\\Assignment3")
cdc <- read.csv("cleaned-cdc-mortality-1999-2010.csv")
library(shiny)
setwd("C:\\Users\\Brett\\Dropbox\\CUNY\\608\\Assignment3")
runApp("Problem2")
state.name
head(cdc)
runApp("Problem2")
?filter
library(dplyr)
?filter
table(cdc$ICD.Chapter)
filter(cdc, ICD.Chapter == "Neoplasms", State=="Alabama")
runApp("Problem2")
runApp("Problem2")
head(cdc)
1092/4430141
*1000
1092/4430141
(1092/4430141) * 1000
(1092/4430141) * 100000
(1188/4447100) * 100000
runApp("Problem2")
ddply(cdc, ~Year, summarise, crude.mort = (Deaths/Population) * 100000)
library(plyr)
ddply(cdc, ~Year, summarise, crude.mort = (Deaths/Population) * 100000)
aggregate(cdc$Year, by=list(cdc$Year), FUN=sum)
aggregate(cdc$Year, by=list(cdc$Year), FUN=(cdc$Deaths/cdc$Population) * 100000)
head(cdc)
test <- filter(cdc, Year==2010)
test
head(test)
nrow(test)
test <- filter(cdc, Year==2010)
test
table(cdc$IDC.Cause)
table(cdc$IDC.Chapter)
head(cdc)
table(cdc$ICD.Chapter)
test <- filter(cdc, ICD.Chapter == "Neoplasms")
test
ddply(test, ~Year, summarise, crude.mort = (Deaths/Population) * 100000)
ddply(test, .Year, summarise, crude.mort = (Deaths/Population) * 100000)
ddply(test, Year, summarise, crude.mort = (Deaths/Population) * 100000)
ddply(test, ~Year, summarise, crude.mort = (Deaths/Population) * 100000)
test <- filter(cdc, ICD.Chapter == "Neoplasms")
test %>%
group_by(Year) %>%
summarise(new.mort = sum(Deaths)/sum(Population) * 100000)
summarise(new.mort = sum(as.numeric(Deaths))/sum(as.numeric(Population)) * 100000)
test %>%
group_by(Year) %>%
summarise(new.mort = sum(as.numeric(Deaths))/sum(as.numeric(Population)) * 100000)
test %>%
group_by(Year)
library(doBy)
install.packages("doBy")
aggregate(test[c("Population", "Death")], by=test["Year"])
head(test)
aggregate(test[c("Population", "Deaths")], by=test["Year"])
aggregate(test[c("Population", "Deaths")], by=test["Year"], FUN=length)
aggregate(test["new"], by=test["Year"], FUN=length)
aggregate(test[c("Population", "Deaths")], by=test["Year"], FUN=sum)
natlAvg <- aggregate(test[c("Population", "Deaths")], by=test["Year"], FUN=sum)
natlAvg["crudeMort"] <- (natlAvg$Deaths/natlAvg$Population) * 100000
natlAvg
runApp("Problem2")
natlAvg["crudeMort"] <- (natlAvg$Deaths/natlAvg$Population) * 10000
natlAvg
natlAvg["crudeMort"] <- (natlAvg$Deaths/natlAvg$Population) * 1000
natlAvg
head(cdc)
table(cdc$Crude.Rate)
natlAvg["crudeMort"] <- (natlAvg$Deaths/natlAvg$Population) * 1000
natlAvg <- aggregate(test[c("Population", "Deaths")], by=test["Year"], FUN=sum)
natlAvg["crudeMort"] <- (natlAvg$Deaths/natlAvg$Population) * 1000
natlAvg
table(cdc$ICD.Chapter)
test <- filter(cdc, ICD.Chapter == "Neoplasms", State== "Alabama")
test
natlAvg
test$Crude.Rate - natlAvg$crudeMort
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
head(cdc)
1211/4467634
(1211/4467634) * 100000
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
filter(cdc, State=="South Dakota")
filter(cdc, State=="South Dakota", ICD.Chapter=="Diseases of the skin and subcutaneous tissue")
table(cdc$Year)
length(table(cdc$Year))
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
runApp("Problem2")
library(shiny)
library(plyr)
setwd("C:\\Users\\Brett\\Dropbox\\CUNY\\608\\Assignment3")
runApp("Problem2")
library(shiny)
setwd("C:\\Users\\Brett\\Dropbox\\CUNY\\608\\Assignment3")
runApp("Problem1")
library(shiny)
library(plyr)
setwd("C:\\Users\\Brett\\Dropbox\\CUNY\\608\\Assignment3")
runApp("Problem2")
library(shiny)
library(plyr)
setwd("C:\\Users\\Brett\\Dropbox\\CUNY\\608\\Assignment3")
runApp("Problem2")
library(shiny)
library(plyr)
setwd("C:\\Users\\Brett\\Dropbox\\CUNY\\608\\Assignment3")
runApp("Problem2")
runApp("Problem1")
